//Ho messo un pò di printf qua e la per controllare il funzionamento del programma, se non le volete toglietele.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct number {
    int b;
    int n;
    int v;
    struct number* next;
} numbers;

int len(char* str){
    int i=0;
    for (i=0;str[i]!='\0';i++);
    return i;
}

int versign(int n){
    //restituisce 1 se il segno di n è positivo altrimenti -1
    if (n>=0)
        return 1;
    if (n<0)
        return -1;
    return 0;
}

int elev(int b, int k){
    //elevamento  di b alla k^esima potenza;
    if (k<=0)
        return 1;
    else
        return b*elev(b,k-1);
}

int order(int n){
    //restituisce il numero di cifre di un numero
    int i;
    for (i=0;n!=0;i++, n=n/10);
    return i;
}

numbers* divide(char* expr){
    //divide la stringa expr in una struct number
    
    //dichiaro e inizializzo un pò di roba
    int i,j, cnt=0;
    char* etemp = strdup("0");
    int sign=1;
    int ntemp=0;
    int l=len(expr);
    printf("len frase = %i\n", l);
    
    //dichiaro ed inizializzo il primo elemento della lista e ne faccio una copia per conservarne l'indirizzo
    numbers* expression=malloc(sizeof(numbers));
    numbers* temp = expression;
    
    for (i=0;i<l;){
        printf("inizio ciclo for: i = %i\n\n", i);
        if (expr[i]!=' '){
            if (cnt%2==0){
                //copio la base in temp->b
                etemp = strdup("0");
                etemp[0] = expr[i];
                temp->b = atoi(etemp);
                printf("expression con i = %i: b = %i, cnt = %i\n", i, temp->b, cnt);
            }
            if (cnt%2==1){
                if (expr[i]=='-'){
                    sign = -1;
                    i++;
                }
                for (j=0; i<l && expr[i]!=' '; i++, j++){
                    etemp = strdup("0");
                    etemp[0]=expr[i];
                    ntemp += atoi(etemp)*(elev(10,j));
                }
                temp->n=ntemp*sign;
                ntemp=0;
                sign=1;
                if (expr[i]=='\0'){
                    temp->next=NULL;
                    printf("expression con i = %i: b = %i, n = %i\n\n", i, temp->b, temp->n);
                }
                else{
                    numbers* successivo=malloc(sizeof(numbers));
                    temp->next = successivo;
                    printf("expression con i = %i: b = %i, n = %i\n\n", i, temp->b, temp->n);
                    temp = temp->next;
                }
				i--;
            }
            cnt++;
        }
        i++;
        printf("fine ciclo for: i = %i\n\n\n", i);
    }
    return expression;
}

numbers* convert(numbers* expression){
	//converte i numeri n da base b a base 10
    numbers* temp=expression;
    for(;temp!=NULL; temp=temp->next){
        int b=temp->b;
        temp->v=0;
        int sign = versign(temp->n);
        int n=temp->n*sign;
        int o = order(n)-1;
        for(int j=0; n!=0; j++){
            temp->v += n/elev(10,o-j)*(elev(b,o-j));
            n = n%elev(10,o-j);
            if(order(n)!=o-1 && order(n)!=0)
                j++;
        }
        temp->v = sign*temp->v;
    }
    return expression;
}

int max_b(char* expr){
	//tra i numeri dell'espressione restituisce quello con valore più grande in base 10 in base 10
    numbers* expression = divide(expr);
    expression = convert(expression);
    int val=0, valtemp=0;
    for (;expression!=NULL;expression = expression->next){
        valtemp = expression->v;
        if (valtemp>val)
            val=valtemp;
    }
    return val;
}

int main() {
    char* prova = "2 101 3 2 8 -101 8 101";
    printf("il massimo tra i valori dati convertiti in base 10 è %i\n", max_b(prova));
}
